import json
from urllib.parse import parse_qs
from datetime import datetime
from channels.generic.websocket import AsyncWebsocketConsumer
from channels.db import database_sync_to_async
from django.contrib.auth import get_user_model
from django.db.models import Q
from rest_framework_simplejwt.tokens import AccessToken
from .models import Chat, Message

User = get_user_model()


class ChatConsumer(AsyncWebsocketConsumer):
    async def connect(self):
        try:
            self.chat_id = self.scope['url_route']['kwargs']['chat_id']
            self.room_group_name = f'chat_{self.chat_id}'

            query_string = parse_qs(self.scope['query_string'].decode())
            token = query_string.get('token', [None])[0]

            if token is None:
                print("‚ùå Token –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                await self.close(code=4001)
                return

            user = await self.get_user_from_token(token)
            if user is None:
                print("‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
                await self.close(code=4001)
                return

            if not await self.is_chat_participant(user):
                print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞")
                await self.close(code=4003)
                return

            self.scope['user'] = user
            await self.channel_layer.group_add(self.room_group_name, self.channel_name)
            await self.accept()

        except Exception as e:
            print(f"üî• –û—à–∏–±–∫–∞ –≤ WebSocket: {e}")
            await self.close(code=1011)  # –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞

    @database_sync_to_async
    def get_user_from_token(self, token):
        """–î–µ–∫–æ–¥–∏—Ä—É–µ–º JWT-—Ç–æ–∫–µ–Ω –∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            access_token = AccessToken(token)
            user_id = access_token['user_id']
            return User.objects.get(id=user_id)
        except Exception as e:
            print("Token error:", e)
            return None

    @database_sync_to_async
    def is_chat_participant(self, user):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞"""
        return Chat.objects.filter(
            id=self.chat_id
        ).filter(
            Q(user1=user) | Q(user2=user)
        ).exists()

    async def disconnect(self, close_code):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        await self.channel_layer.group_discard(
            self.room_group_name,
            self.channel_name
        )

    async def receive(self, text_data=None, bytes_data=None):
        """–ü—Ä–∏–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not text_data:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—É—Å—Ç—ã–µ
            print("‚ùå –ü–æ–ª—É—á–µ–Ω–æ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
            return

        try:
            text_data_json = json.loads(text_data)  # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JSON
        except json.JSONDecodeError:
            print("‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON!")
            return

        message = text_data_json.get('message', '')

        if not message.strip():  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            print("‚ö†Ô∏è –ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
            return

        await self.save_message(self.scope['user'], message)

        await self.channel_layer.group_send(
            self.room_group_name,
            {
                'type': 'chat_message',
                'message': message,
                'sender_id': self.scope['user'].id,
                'sender_username': self.scope['user'].username,
                'sent_at': str(datetime.now())  # –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            }
        )

    async def chat_message(self, event):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ WebSocket"""
        await self.send(text_data=json.dumps({
            'message': event['message'],
            'sender_id': event['sender_id'],
            'sender_username': event['sender_username'],
            'sent_at': event['sent_at']
        }))

    @database_sync_to_async
    def save_message(self, user, message):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î"""
        chat = Chat.objects.get(id=self.chat_id)  # –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç
        return Message.objects.create(
            chat=chat,
            sender=user,
            content=message
        )